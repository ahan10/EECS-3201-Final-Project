// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================

//Wire and reg declarations to strore output vales

wire [5:0] hex;
reg [7:0] hex0, hex1, hex2, hex3, hex4, hex5;
reg [5:0] score_ones, score_tens;
wire [4:0] score;
wire gameEnd;

// call to our main function, using the required ports

main(KEY[0], MAX10_CLK1_50, SW[5:0], hex[5:0], LEDR[4:0], LEDR[9:6], score, gameEnd);

// An always block triggered whenever any value is changed
// The default state for all HEX's are initialised to be off at the begining
// If condition to check if the game has ended or not, if it hasn't then HEX's are turned on based on the output received, else displays the score
// Switch case to check which hex is to be turned on, and maes a 8 on it, this is changed every 2 seconds
// If the game has ended it displays : "PtS. <score>" on the HEX

always @(*) begin
	hex0 = 8'b11111111;
	hex1 = 8'b11111111;
	hex2 = 8'b11111111;
	hex3 = 8'b11111111;
	hex4 = 8'b11111111;
	hex5 = 8'b11111111;

	if (gameEnd == 0) begin 

		case(hex)
			6'b000001: hex0 = 8'b10000000;
			6'b000010: hex1 = 8'b10000000;
			6'b000100: hex2 = 8'b10000000;
			6'b001000: hex3 = 8'b10000000;
			6'b010000: hex4 = 8'b10000000;
			6'b100000: hex5 = 8'b10000000;
		endcase

	end else begin

		score_ones= score%10;
		score_tens= score/10;

		case(score_ones)
			5'd0: hex0 = 8'b11000000;// generates the number '0'
			5'd1: hex0 = 8'b11111001;// generates the number '1'
			5'd2: hex0 = 8'b10100100;// generates the number '2'
			5'd3: hex0 = 8'b10110000;// generates the number '3'
			5'd4: hex0 = 8'b10011001;// generates the number '4'
			5'd5: hex0 = 8'b10010010;// generates the number '5'
			5'd6: hex0 = 8'b10000010;// generates the number '6'
			5'd7: hex0 = 8'b11111000;// generates the number '7'
			5'd8: hex0 = 8'b10000000;// generates the number '8'
			5'd9: hex0 = 8'b10010000;// generates the number '9'
		endcase

		case(score_tens)
			5'd0: hex1 = 8'b11000000;// generates the number '0'
			5'd1: hex1 = 8'b11111001;// generates the number '1'
			5'd2: hex1 = 8'b10100100;// generates the number '2'
			5'd3: hex1 = 8'b10110000;// generates the number '3'
			5'd4: hex1 = 8'b10011001;// generates the number '4'
			5'd5: hex1 = 8'b10010010;// generates the number '5'
			5'd6: hex1 = 8'b10000010;// generates the number '6'
			5'd7: hex1 = 8'b11111000;// generates the number '7'
			5'd8: hex1 = 8'b10000000;// generates the number '8'
			5'd9: hex1 = 8'b10010000;// generates the number '9'
		endcase

		hex5 = 8'b10001100; //generates the letter 'P'
		hex4 = 8'b10000111;//generates the letter 't'
		hex3 = 8'b00010010;//generates'S.'

	end
end 

//assigning the value to HEX's
assign HEX0 = hex0;
assign HEX1 = hex1;
assign HEX2 = hex2;
assign HEX3 = hex3;
assign HEX4 = hex4;
assign HEX5 = hex5;

endmodule
